# https://leetcode.com/problems/evaluate-division/?envType=study-plan-v2&envId=leetcode-75
# 399. Evaluate Division

class Solution:
    def calcEquation(self, equations: List[List[str]], values: List[float], queries: List[List[str]]) -> List[float]:
        
        graph = {}
            
        for (dividend, divisor), value in zip(equations, values):
        # zip pairs 
            if dividend not in graph:
                graph[dividend] = {}
            if divisor not in graph:
                graph[divisor] = {}
            graph[dividend][divisor] = value
            graph[divisor][dividend] = 1.0 / value
            # equation 에 들어있다면 그래프에 저장한다
            # 이 때 "a", "b" -> 1.5라면 
            # a/b = 1.5 b/a = 1/1.5 를 모두 저장한다

        def dfs(start, end, visited):
            if start not in graph or end not in graph:
                return -1.0  # undefined면 -1.0을 return
            if start == end:
                return 1.0    # start/end를 하는거니까 1.0 을 return
                
            visited.add(start) #일단 start를 visit
            for neighbor in graph[start]: # start의 neighbor를 방문
                if neighbor not in visited: # 방문하지 않았다면
                    visited.add(neighbor)    # 방문해주고
                    temp = dfs(neighbor, end, visited) # recursion
                     # dfs는 결과물을 곱하는 게 될 것
                    if temp != -1.0:
                        return graph[start][neighbor] * temp
            return -1.0

        results = []
        for query in queries: #input query 를 받아와서 dfs로 진행
            results.append(dfs(query[0], query[1], set()))

        return results
