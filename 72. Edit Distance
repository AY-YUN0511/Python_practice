# https://leetcode.com/problems/edit-distance/?envType=study-plan-v2&envId=leetcode-75
# 72. Edit Distance

class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        m, n = len(word1), len(word2)
        dp = [[0] * (n + 1) for _ in range(m + 1)] #일단 0으로 initialize
        # word1의 i번째를 word2의 j번째로 만들기 위한 operation의 수

        for i in range(m + 1):
            dp[i][0] = i  # 아무것도 없는거를 만드려면 i개를 모두 delete해야한다
        for j in range(n + 1):
            dp[0][j] = j  # 아무것도 없는 상태에서 j개를 만드려면 j만큼 insertion

        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if word1[i - 1] == word2[j - 1]:  #text는 0번부터 위치해있으니까
                    dp[i][j] = dp[i - 1][j - 1]  #똑같으면 이전 dp의 의 것을 가져온다
                else:
                    dp[i][j] = 1 + min(
                        dp[i - 1][j],    # Deletion
                        dp[i][j - 1],    # Insertion
                        dp[i - 1][j - 1] # Substitution
                    )

        return dp[m][n]
